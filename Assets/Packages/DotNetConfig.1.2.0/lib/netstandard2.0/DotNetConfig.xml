<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetConfig</name>
    </assembly>
    <members>
        <member name="T:DotNetConfig.Config">
            <summary>
            Provides access to .netconfig configuration options.
            </summary>
        </member>
        <member name="F:DotNetConfig.Config.UserExtension">
            <summary>
            The local-level .user extension.
            </summary>
        </member>
        <member name="F:DotNetConfig.Config.FileName">
            <summary>
            Default filename, equal to '.netconfig'.
            </summary>
        </member>
        <member name="P:DotNetConfig.Config.GlobalLocation">
            <summary>
            Default global location, equal to <see cref="F:System.Environment.SpecialFolder.UserProfile"/> plus 
            <see cref="F:DotNetConfig.Config.FileName"/>.
            </summary>
        </member>
        <member name="P:DotNetConfig.Config.SystemLocation">
            <summary>
            Default system location, equal to <see cref="F:System.Environment.SpecialFolder.System"/> plus 
            <see cref="F:DotNetConfig.Config.FileName"/>.
            </summary>
        </member>
        <member name="M:DotNetConfig.Config.Build(System.String)">
            <summary>
            Builds configuration from the given path, which can be a directory or a file path. 
            If ommited, the <see cref="M:System.IO.Directory.GetCurrentDirectory"/> will be used.
            </summary>
            <remarks>
            <para>
            The returned configuration will contain the aggregate hierarchical configuration 
            from the given directory (or file) and any ancestor directories, plus 
            <see cref="F:DotNetConfig.ConfigLevel.Global"/> and <see cref="F:DotNetConfig.ConfigLevel.System"/> locations.
            </para>
            </remarks>
        </member>
        <member name="M:DotNetConfig.Config.Build(DotNetConfig.ConfigLevel)">
            <summary>
            Access the configuration from a specific store.
            </summary>
        </member>
        <member name="M:DotNetConfig.Config.#ctor(System.String)">
            <summary>
            Creates the <see cref="T:DotNetConfig.Config"/> and sets <see cref="P:DotNetConfig.Config.FilePath"/> to the given <paramref name="filePath"/>.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="P:DotNetConfig.Config.FilePath">
            <summary>
            Path to the file that will be used to save values when writing 
            changes to disk.
            </summary>
        </member>
        <member name="P:DotNetConfig.Config.Level">
            <summary>
            Gets the optional configuration level for this config. 
            <see langword="null"/> unless the <see cref="P:DotNetConfig.Config.FilePath"/> equals 
            <see cref="P:DotNetConfig.Config.GlobalLocation"/> or <see cref="P:DotNetConfig.Config.SystemLocation"/> or 
            it ends in <c>.user</c> in which case it's <see cref="F:DotNetConfig.ConfigLevel.Local"/>.
            </summary>
        </member>
        <member name="M:DotNetConfig.Config.GetSection(System.String,System.String)">
            <summary>
            Gets the section and optional subsection from the configuration.
            </summary>
            <param name="section">The section containing the variables.</param>
            <param name="subsection">Optional subsection containing the variables.</param>
        </member>
        <member name="M:DotNetConfig.Config.AddBoolean(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a value to a multi-valued variable in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.Config.AddDateTime(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Adds a value to a multi-valued variable in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.Config.AddNumber(System.String,System.String,System.String,System.Int64)">
            <summary>
            Adds a value to a multi-valued variable in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.Config.AddString(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a value to a multi-valued variable in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.Config.GetAll(System.String,System.String,System.String,System.String)">
            <summary>
            Gets all values from a multi-valued variable from the given section and optional subsection, 
            which optionally match the given value regular expression.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to remove.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.Config.GetRegex(System.String,System.String)">
            <summary>
            Gets all values where the key (section plus subsection and variable name) match 
            the <paramref name="nameRegex"/> and optionally also the <paramref name="valueRegex"/>.
            </summary>
            <param name="nameRegex">Regular expression to match against the key (section plus subsection and variable name).</param>
            <param name="valueRegex">Optional regular expression to match against the variable values.</param>
        </member>
        <member name="M:DotNetConfig.Config.GetNormalizedPath(System.String,System.String,System.String)">
            <summary>
            Gets a string variable and applies path normalization to it, resolving 
            relative paths and normalizing directory separator characters to the 
            current platform.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to retrieve as a resolved path.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.Config.SetBoolean(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.Config.SetDateTime(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.Config.SetNumber(System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.Config.SetString(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.Config.SetAllBoolean(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.Config.SetAllDateTime(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.Config.SetAllNumber(System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.Config.SetAllString(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.Config.TryGetBoolean(System.String,System.String,System.String,System.Boolean@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.Config.TryGetDateTime(System.String,System.String,System.String,System.DateTime@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.Config.TryGetNumber(System.String,System.String,System.String,System.Int64@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.Config.TryGetString(System.String,System.String,System.String,System.String@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.Config.Unset(System.String,System.String,System.String)">
            <summary>
            Removes a variable from the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to remove.</param>
        </member>
        <member name="M:DotNetConfig.Config.UnsetAll(System.String,System.String,System.String,System.String)">
            <summary>
            Removes all values from a multi-valued variable from the given section and optional subsection.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to remove.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.Config.RemoveSection(System.String,System.String)">
            <summary>
            Remove the given section from the configuration file.
            </summary>
            <param name="section">The section to remove.</param>
            <param name="subsection">Optional subsection to remove.</param>
        </member>
        <member name="M:DotNetConfig.Config.RenameSection(System.String,System.String,System.String,System.String)">
            <summary>
            Renames a section and optional subsection.
            </summary>
            <param name="oldSection">The old section name to rename.</param>
            <param name="oldSubsection">The optional old subsection to rename.</param>
            <param name="newSection">The new section name to use.</param>
            <param name="newSubsection">The optional new subsection to use.</param>
        </member>
        <member name="M:DotNetConfig.Config.GetEntries">
            <summary>
            Gets the configuration entries in the current configuration.
            </summary>
        </member>
        <member name="M:DotNetConfig.ConfigDocument.CleanupSection(System.String,System.String)">
            <summary>
            Removes a section containing no more variables.
            </summary>
        </member>
        <member name="T:DotNetConfig.ConfigEntry">
            <summary>
            Represents a configuration option.
            </summary>
        </member>
        <member name="M:DotNetConfig.ConfigEntry.#ctor(System.String,System.String,System.String,System.String,System.Nullable{DotNetConfig.ConfigLevel})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetConfig.ConfigEntry" /> class with a given key, value and store level.
            </summary>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="name">The variable name.</param>
            <param name="value">The variable value.</param>
            <param name="level">The origin store.</param>
        </member>
        <member name="P:DotNetConfig.ConfigEntry.Section">
            <summary>
            Gets the section containing the entry.
            </summary>
        </member>
        <member name="P:DotNetConfig.ConfigEntry.Subsection">
            <summary>
            Gets the optional subsection containing the entry.
            </summary>
        </member>
        <member name="P:DotNetConfig.ConfigEntry.Variable">
            <summary>
            Gets the variable name.
            </summary>
        </member>
        <member name="P:DotNetConfig.ConfigEntry.RawValue">
            <summary>
            Gets the variable raw value.
            </summary>
        </member>
        <member name="P:DotNetConfig.ConfigEntry.Level">
            <summary>
            Gets the origin store. <see langword="null"/> if not either <see cref="F:DotNetConfig.ConfigLevel.Global"/> 
            or <see cref="F:DotNetConfig.ConfigLevel.System"/>.
            </summary>
        </member>
        <member name="P:DotNetConfig.ConfigEntry.Comment">
            <summary>
            Gets or sets the optional comment.
            </summary>
        </member>
        <member name="P:DotNetConfig.ConfigEntry.Key">
            <summary>
            Gets the key for the entry.
            </summary>
        </member>
        <member name="M:DotNetConfig.ConfigEntry.GetBoolean">
            <summary>
            Gets the typed <see cref="T:System.Boolean"/> value for the entry.
            </summary>
            <returns>The <see cref="T:System.Boolean"/> corresponding to the <see cref="P:DotNetConfig.ConfigEntry.RawValue"/>.</returns>
            <exception cref="T:System.FormatException">The <see cref="P:DotNetConfig.ConfigEntry.RawValue"/> cannot be converted to <see cref="T:System.Boolean"/>.</exception>
        </member>
        <member name="M:DotNetConfig.ConfigEntry.GetDateTime">
            <summary>
            Gets the typed <see cref="T:System.DateTime"/> value for the entry.
            </summary>
            <returns>The <see cref="T:System.DateTime"/> corresponding to the <see cref="P:DotNetConfig.ConfigEntry.RawValue"/>.</returns>
            <exception cref="T:System.FormatException">The <see cref="P:DotNetConfig.ConfigEntry.RawValue"/> cannot be converted to <see cref="T:System.DateTime"/>.</exception>
        </member>
        <member name="M:DotNetConfig.ConfigEntry.GetNumber">
            <summary>
            Gets the typed <see cref="T:System.Int64"/> value for the entry.
            </summary>
            <returns>The <see cref="T:System.Int64"/> corresponding to the <see cref="P:DotNetConfig.ConfigEntry.RawValue"/>.</returns>
            <exception cref="T:System.FormatException">The <see cref="P:DotNetConfig.ConfigEntry.RawValue"/> cannot be converted to <see cref="T:System.Int64"/>.</exception>
        </member>
        <member name="M:DotNetConfig.ConfigEntry.GetString">
            <summary>
            Gets the <see cref="T:System.String"/> value for the entry.
            </summary>
            <returns>The <see cref="T:System.String"/> from the <see cref="P:DotNetConfig.ConfigEntry.RawValue"/>.</returns>
            <exception cref="T:System.FormatException">The <see cref="P:DotNetConfig.ConfigEntry.RawValue"/> cannot be converted to <see cref="T:System.String"/>, because it does not have a value.</exception>
        </member>
        <member name="T:DotNetConfig.ConfigExtensions">
            <summary>
            Usability overloads for <see cref="T:DotNetConfig.Config"/>.
            </summary>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddBoolean(DotNetConfig.Config,System.String,System.String,System.String,System.Boolean,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="subsection">The subsection containing the variable.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddDateTime(DotNetConfig.Config,System.String,System.String,System.String,System.DateTime,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">The subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddNumber(DotNetConfig.Config,System.String,System.String,System.Int64)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddNumber(DotNetConfig.Config,System.String,System.String,System.Int64,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddNumber(DotNetConfig.Config,System.String,System.String,System.String,System.Int64,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">The subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddString(DotNetConfig.Config,System.String,System.String,System.String)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddString(DotNetConfig.Config,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.AddString(DotNetConfig.Config,System.String,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section.
            </summary>
            <param name="config">The configuration to add the value to.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">The optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetBoolean(DotNetConfig.Config,System.String,System.String,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration to get the value from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetBoolean(DotNetConfig.Config,System.String,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration to get the value from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetDateTime(DotNetConfig.Config,System.String,System.String,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration to get the value from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetDateTime(DotNetConfig.Config,System.String,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration to get the value from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetNumber(DotNetConfig.Config,System.String,System.String,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration to get the value from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetNumber(DotNetConfig.Config,System.String,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration to get the value from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetString(DotNetConfig.Config,System.String,System.String,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration to get the value from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetString(DotNetConfig.Config,System.String,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration to get the value from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetNormalizedPath(DotNetConfig.Config,System.String,System.String)">
            <summary>
            Gets a string variable and applies path normalization to it, resolving 
            relative paths and normalizing directory separator characters to the 
            current platform.
            </summary>
            <param name="config">The configuration to get the value from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to retrieve as a resolved path.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetAll(DotNetConfig.Config,System.String,System.String)">
            <summary>
            Gets all values from a multi-valued variable from the given section.
            </summary>
            <param name="config">The configuration to get the values from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to remove.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.GetAll(DotNetConfig.Config,System.String,System.String,System.String)">
            <summary>
            Gets all values from a multi-valued variable from the given section and optional subsection, 
            which optionally match the given value regular expression.
            </summary>
            <param name="config">The configuration to get the values from.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to remove.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetBoolean(DotNetConfig.Config,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetBoolean(DotNetConfig.Config,System.String,System.String,System.String,System.Boolean,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetBoolean(DotNetConfig.Config,System.String,System.String,System.String,System.Boolean,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetDateTime(DotNetConfig.Config,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetDateTime(DotNetConfig.Config,System.String,System.String,System.String,System.DateTime,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetDateTime(DotNetConfig.Config,System.String,System.String,System.String,System.DateTime,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetNumber(DotNetConfig.Config,System.String,System.String,System.Int64)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetNumber(DotNetConfig.Config,System.String,System.String,System.String,System.Int64)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetNumber(DotNetConfig.Config,System.String,System.String,System.Int64,System.String)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetNumber(DotNetConfig.Config,System.String,System.String,System.Int64,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetNumber(DotNetConfig.Config,System.String,System.String,System.String,System.Int64,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetNumber(DotNetConfig.Config,System.String,System.String,System.Int64,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetNumber(DotNetConfig.Config,System.String,System.String,System.String,System.Int64,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetString(DotNetConfig.Config,System.String,System.String,System.String)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetString(DotNetConfig.Config,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetString(DotNetConfig.Config,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetString(DotNetConfig.Config,System.String,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetString(DotNetConfig.Config,System.String,System.String,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllBoolean(DotNetConfig.Config,System.String,System.String,System.String,System.Boolean,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllDateTime(DotNetConfig.Config,System.String,System.String,System.String,System.DateTime,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllNumber(DotNetConfig.Config,System.String,System.String,System.Int64)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllNumber(DotNetConfig.Config,System.String,System.String,System.Int64,System.String)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllNumber(DotNetConfig.Config,System.String,System.String,System.Int64,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllNumber(DotNetConfig.Config,System.String,System.String,System.Int64,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllNumber(DotNetConfig.Config,System.String,System.String,System.String,System.Int64,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllString(DotNetConfig.Config,System.String,System.String,System.String)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllString(DotNetConfig.Config,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllString(DotNetConfig.Config,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllString(DotNetConfig.Config,System.String,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.SetAllString(DotNetConfig.Config,System.String,System.String,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.TryGetBoolean(DotNetConfig.Config,System.String,System.String,System.Boolean@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.TryGetDateTime(DotNetConfig.Config,System.String,System.String,System.DateTime@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.TryGetNumber(DotNetConfig.Config,System.String,System.String,System.Int64@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.TryGetString(DotNetConfig.Config,System.String,System.String,System.String@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.Unset(DotNetConfig.Config,System.String,System.String)">
            <summary>
            Removes a variable from the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to remove.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.Unset(DotNetConfig.Config,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Removes a variable from the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to remove.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.Unset(DotNetConfig.Config,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Removes a variable from the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to remove.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.UnsetAll(DotNetConfig.Config,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Removes all values from a multi-valued variable from the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to remove.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.UnsetAll(DotNetConfig.Config,System.String,System.String,System.String)">
            <summary>
            Removes all values from a multi-valued variable from the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to remove.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.UnsetAll(DotNetConfig.Config,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Removes all values from a multi-valued variable from the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="variable">The variable to remove.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.UnsetAll(DotNetConfig.Config,System.String,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Removes all values from a multi-valued variable from the given section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section containing the variable.</param>
            <param name="subsection">Optional subsection containing the variable.</param>
            <param name="variable">The variable to remove.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.RemoveSection(DotNetConfig.Config,System.String)">
            <summary>
            Remove the given section from the configuration file.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section to remove.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.RemoveSection(DotNetConfig.Config,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Remove the given section from the configuration file.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="section">The section to remove.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.RenameSection(DotNetConfig.Config,System.String,System.String)">
            <summary>
            Renames a section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="oldSection">The old section name to rename.</param>
            <param name="newSection">The new section name to use.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.RenameSection(DotNetConfig.Config,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Renames a section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="oldSection">The old section name to rename.</param>
            <param name="newSection">The new section name to use.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigExtensions.RenameSection(DotNetConfig.Config,System.String,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Renames a section.
            </summary>
            <param name="config">The configuration to operate on.</param>
            <param name="oldSection">The old section name to rename.</param>
            <param name="oldSubsection">The optional old subsection to rename.</param>
            <param name="newSection">The new section name to use.</param>
            <param name="newSubsection">The optional new subsection to use.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="T:DotNetConfig.ConfigLevel">
            <summary>
            Specifies the level of configuration to use.
            </summary>
            <remarks>
            If not provided, the default <c>.netconfig</c> location will be used, 
            which is typically the current directory unless building configuration 
            from a specific file.
            </remarks>
        </member>
        <member name="F:DotNetConfig.ConfigLevel.Local">
            <summary>
            Use a <c>.netconfig.user</c> file, instead of the default <c>.netconfig</c>, 
            which allows separating local-only settings from potentially 
            team-wide configuration files that can be checked-in source control.
            </summary>
        </member>
        <member name="F:DotNetConfig.ConfigLevel.Global">
            <summary>
            The global ~/.netconfig for the current user, from the 
            <see cref="F:System.Environment.SpecialFolder.UserProfile"/> location.
            </summary>
            <seealso cref="P:DotNetConfig.Config.GlobalLocation"/>
        </member>
        <member name="F:DotNetConfig.ConfigLevel.System">
            <summary>
            The system wide .netconfig, from the 
            <see cref="F:System.Environment.SpecialFolder.System"/> location.
            </summary>
            <seealso cref="P:DotNetConfig.Config.SystemLocation"/>
        </member>
        <member name="T:DotNetConfig.ConfigSection">
            <summary>
            Provides access to a specific section and optional subsection.
            </summary>
        </member>
        <member name="P:DotNetConfig.ConfigSection.Section">
            <summary>
            Gets the section name.
            </summary>
        </member>
        <member name="P:DotNetConfig.ConfigSection.Subsection">
            <summary>
            Gets the subsection name (if any).
            </summary>
        </member>
        <member name="M:DotNetConfig.ConfigSection.AddBoolean(System.String,System.Boolean)">
            <summary>
            Adds a value to a multi-valued variable in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.AddDateTime(System.String,System.DateTime)">
            <summary>
            Adds a value to a multi-valued variable in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.AddNumber(System.String,System.Int64)">
            <summary>
            Adds a value to a multi-valued variable in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.AddString(System.String,System.String)">
            <summary>
            Adds a value to a multi-valued variable in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.GetAll(System.String,System.String)">
            <summary>
            Gets all values from a multi-valued variable from the current section/subsection, 
            which optionally match the given value regular expression.
            </summary>
            <param name="variable">The variable to remove.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.GetNormalizedPath(System.String)">
            <summary>
            Gets a string variable and applies path normalization to it, resolving 
            relative paths and normalizing directory separator characters to the 
            current platform.
            </summary>
            <param name="variable">The variable to retrieve as a resolved path.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigSection.SetAllBoolean(System.String,System.Boolean,System.String)">
            <summary>
            Sets the value of all matching variables in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.SetAllDateTime(System.String,System.DateTime,System.String)">
            <summary>
            Sets the value of all matching variables in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.SetAllNumber(System.String,System.Int64,System.String)">
            <summary>
            Sets the value of all matching variables in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.SetAllString(System.String,System.String,System.String)">
            <summary>
            Sets the value of all matching variables in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.SetBoolean(System.String,System.Boolean,System.String)">
            <summary>
            Sets the value of a variable in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.SetDateTime(System.String,System.DateTime,System.String)">
            <summary>
            Sets the value of a variable in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.SetNumber(System.String,System.Int64,System.String)">
            <summary>
            Sets the value of a variable in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.SetString(System.String,System.String,System.String)">
            <summary>
            Sets the value of a variable in the current section/subsection.
            </summary>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.TryGetBoolean(System.String,System.Boolean@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigSection.TryGetDateTime(System.String,System.DateTime@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigSection.TryGetNumber(System.String,System.Int64@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigSection.TryGetString(System.String,System.String@)">
            <summary>
            Tries to retrieve a variable value from configuration.
            </summary>
            <param name="variable">The variable to retrieve.</param>
            <param name="value">The variable value if found.</param>
            <returns><see langword="true"/> if the value was found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigSection.Unset(System.String)">
            <summary>
            Removes a variable from the current section/subsection.
            </summary>
            <param name="variable">The variable to remove.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSection.UnsetAll(System.String,System.String)">
            <summary>
            Removes all values from a multi-valued variable from the current section/subsection.
            </summary>
            <param name="variable">The variable to remove.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
        </member>
        <member name="T:DotNetConfig.ConfigSectionExtensions">
            <summary>
            Usability overloads for <see cref="T:DotNetConfig.ConfigSection"/>.
            </summary>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.AddBoolean(DotNetConfig.ConfigSection,System.String,System.Boolean,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.AddDateTime(DotNetConfig.ConfigSection,System.String,System.DateTime,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.AddNumber(DotNetConfig.ConfigSection,System.String,System.Int64,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.AddString(DotNetConfig.ConfigSection,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Adds a value to a multi-valued variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value add to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.GetBoolean(DotNetConfig.ConfigSection,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.GetDateTime(DotNetConfig.ConfigSection,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.GetNumber(DotNetConfig.ConfigSection,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.GetString(DotNetConfig.ConfigSection,System.String)">
            <summary>
            Retrieves a variable value from configuration.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to retrieve.</param>
            <returns>The value or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetBoolean(DotNetConfig.ConfigSection,System.String,System.Boolean,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetBoolean(DotNetConfig.ConfigSection,System.String,System.Boolean,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetDateTime(DotNetConfig.ConfigSection,System.String,System.DateTime,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetDateTime(DotNetConfig.ConfigSection,System.String,System.DateTime,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetNumber(DotNetConfig.ConfigSection,System.String,System.Int64,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetNumber(DotNetConfig.ConfigSection,System.String,System.Int64,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetString(DotNetConfig.ConfigSection,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetString(DotNetConfig.ConfigSection,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of a variable in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetAllBoolean(DotNetConfig.ConfigSection,System.String,System.Boolean,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetAllBoolean(DotNetConfig.ConfigSection,System.String,System.Boolean,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetAllDateTime(DotNetConfig.ConfigSection,System.String,System.DateTime,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetAllDateTime(DotNetConfig.ConfigSection,System.String,System.DateTime,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetAllNumber(DotNetConfig.ConfigSection,System.String,System.Int64,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetAllNumber(DotNetConfig.ConfigSection,System.String,System.Int64,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetAllString(DotNetConfig.ConfigSection,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.SetAllString(DotNetConfig.ConfigSection,System.String,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Sets the value of all matching variables in the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to assign.</param>
            <param name="value">Value to assign to the matching variables.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.Unset(DotNetConfig.ConfigSection,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Removes a variable from the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to remove.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.UnsetAll(DotNetConfig.ConfigSection,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Removes all values from a multi-valued variable from the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to remove.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="M:DotNetConfig.ConfigSectionExtensions.UnsetAll(DotNetConfig.ConfigSection,System.String,System.String,DotNetConfig.ConfigLevel)">
            <summary>
            Removes all values from a multi-valued variable from the given section and optional subsection.
            </summary>
            <param name="config">The configuration section to operate on.</param>
            <param name="variable">The variable to remove.</param>
            <param name="valueRegex">Filter returned entries to those where the value matches the given expression.</param>
            <param name="level">The configuration level to operate on.</param>
        </member>
        <member name="T:DotNetConfig.Position">
            <summary>
            A position within a line of configuration.
            </summary>
        </member>
        <member name="P:DotNetConfig.Position.Zero">
            <summary>
            The position corresponding to the zero index.
            </summary>
        </member>
        <member name="M:DotNetConfig.Position.#ctor(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new position.
            </summary>
            <param name="line">The line number.</param>
            <param name="absolute">The absolute position (zero-based).</param>
            <param name="column">The column number (one-based).</param>
        </member>
        <member name="P:DotNetConfig.Position.Absolute">
            <summary>
            The zero-based absolute index of the position.
            </summary>
        </member>
        <member name="P:DotNetConfig.Position.Line">
            <summary>
            Gets the one-based line number.
            </summary>
        </member>
        <member name="P:DotNetConfig.Position.Column">
            <summary>
            Gets the one-based column number.
            </summary>
        </member>
        <member name="P:DotNetConfig.Position.HasValue">
            <summary>
            <see langword="true"/> if the position has a value.
            </summary>
        </member>
        <member name="M:DotNetConfig.Position.ToString">
            <summary>
            Gets the <see cref="P:DotNetConfig.Position.Absolute"/> position.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetConfig.TextSpan">
            <summary>
            A span of configuration text within an entire line.
            </summary>
        </member>
        <member name="M:DotNetConfig.TextSpan.#ctor(System.String)">
            <summary>
            Construct a span encompassing an entire string.
            </summary>
            <param name="line">The source line.</param>
        </member>
        <member name="M:DotNetConfig.TextSpan.#ctor(System.String,DotNetConfig.Position,System.Int32,System.String)">
            <summary>
            Construct a string span for a substring of <paramref name="line"/>.
            </summary>
            <param name="line">The source line.</param>
            <param name="position">The start of the span.</param>
            <param name="length">The length of the span.</param>
            <param name="text">Optional pre-calculated text from the span.</param>
        </member>
        <member name="P:DotNetConfig.TextSpan.Line">
            <summary>
            The line of text text containing the span.
            </summary>
        </member>
        <member name="P:DotNetConfig.TextSpan.Position">
            <summary>
            The position of the start of the span within the string.
            </summary>
        </member>
        <member name="P:DotNetConfig.TextSpan.Length">
            <summary>
            The length of the span.
            </summary>
        </member>
        <member name="P:DotNetConfig.TextSpan.Text">
            <summary>
            The text value of the span.
            </summary>
        </member>
        <member name="M:DotNetConfig.TextSpan.ToString">
            <summary>
            Gets the <see cref="P:DotNetConfig.TextSpan.Text"/> represented by this span.
            </summary>
        </member>
        <member name="M:DotNetConfig.TextSpan.op_Implicit(DotNetConfig.TextSpan)~System.String">
            <summary>
            Gets the text value of the span.
            </summary>
        </member>
        <member name="T:DotNetConfig.ValueMatcher">
            <summary>
            Allows matching values by using a regular expression.
            </summary>
        </member>
        <member name="P:DotNetConfig.ValueMatcher.All">
            <summary>
            A <see cref="T:DotNetConfig.ValueMatcher"/> that always matches regardless of the 
            specified value.
            </summary>
        </member>
        <member name="M:DotNetConfig.ValueMatcher.From(System.String)">
            <summary>
            An optional regular expression to use for value matching/filtering.
            </summary>
            <param name="expression">Regular expression, optionally starting with <c>!</c> to negate the match expression.</param>
        </member>
        <member name="M:DotNetConfig.ValueMatcher.op_Implicit(System.String)~DotNetConfig.ValueMatcher">
            <summary>
            Converts a string to a <see cref="T:DotNetConfig.ValueMatcher"/>.
            </summary>
            <param name="expression">Regular expression, optionally starting with <c>!</c> to negate the match expression.</param>
        </member>
        <member name="M:DotNetConfig.ValueMatcher.Matches(System.String)">
            <summary>
            Checks whether the given <paramref name="value"/> matches the expression 
            specified for the <see cref="T:DotNetConfig.ValueMatcher"/> when constructed.
            </summary>
            <returns><see langword="true"/> if the value is not null and matches the expression.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
            <summary>
            Slices the specified array using the specified range.
            </summary>
        </member>
        <member name="T:ThisAssembly">
            <summary>
            Provides access to the current assembly information as pure constants, 
             without requiring reflection.
            </summary>
            <summary>
            Provides access to the current assembly information as pure constants, 
             without requiring reflection.
            </summary>
            <summary>
            Provides access to the current assembly information as pure constants, 
             without requiring reflection.
            </summary>
            <summary>
            Provides access to the current assembly information as pure constants, 
             without requiring reflection.
            </summary>
        </member>
        <member name="T:ThisAssembly.Info">
            <summary>
            Gets the AssemblyInfo attributes.
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>
            => @"v1.2.0"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>
            => @"5bf47f78893133c09e5fed0885d65774efc5452f"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>
            => @"5bf47f788"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Root">
            <summary>
            => @"/home/runner/work/dotnet-config/dotnet-config/"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Url">
            <summary>
            => @"https://github.com/dotnetconfig/dotnet-config"
            </summary>
        </member>
        <member name="T:ThisAssembly.Metadata">
            <summary>
            Gets the assembly metadata.
            </summary>
        </member>
        <member name="F:ThisAssembly.Metadata.RepositoryUrl">
            <summary>RepositoryUrl = https://github.com/dotnetconfig/dotnet-config</summary>
        </member>
        <member name="T:ThisAssembly.Project">
            <summary>
            Gets the project properties.
            </summary>
        </member>
        <member name="T:ThisAssembly.Strings">
            <summary>
            Access the strings provided by resource files in the project.
            </summary>
        </member>
    </members>
</doc>
